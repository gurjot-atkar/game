
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module sfilter(

	//////////// SW //////////
	input 		     [1:0]		SW,
	input 		[15:0] data_x,
	input 		clk,
	input reset,
	output wire [15:0] smooth_out,
	output  [3:0] out
);


reg [16:0] c_value;
reg [16:0] value;

//=======================================================
//  REG/WIRE declarations
//=======================================================
reg [16:0] sum;
reg [3:0] count;
reg [3:0] c_count;


reg go;
always @(*) begin
case(SW)
2'b00: begin
//sum=data_x;
go=1'b1;
end
2'b01: begin
c_count=4'b0010;
if(count==4'b0000)begin
c_count=4'b0010;
go=1'b1;
end
else begin
c_count=count - 4'b0001;
go=1'b0;
end
if(reset==1'b0) begin
c_count=4'b0010;
c_value=16'h0000;
end
end

2'b10: begin
c_count=4'b0100;
if(count==4'b0000)begin
c_count=4'b0100;
go=1'b1;
end
else begin
c_count=count - 4'b0001;
go=1'b0;
end
if(reset==1'b0) begin
c_count=4'b0010;
c_value=16'h0000;
end
end

2'b11: begin
c_count=4'b1111;
if(count==4'b0000)begin
c_count=4'b1111;
go=1'b1;
end
else begin
c_count=count - 4'b0001;
go=1'b0;
end
if(reset==1'b0) begin
c_count=4'b0010;
c_value=16'h0000;
end
end

endcase
if(reset==1'b0) begin
c_count=4'b0000;
c_value=16'h0000;
end
end

always @(posedge clk) begin
if(go==1'b1) begin
value <= data_x;
end
count<=c_count;
//sum<=c_sum
end

assign smooth_out=value;
assign out[3:0]=go;
endmodule

