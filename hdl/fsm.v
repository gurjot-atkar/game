
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module fsm(

	//////////// CLOCK //////////
	input 	clk,
	input		clk2,
	input    clk3,
	input		reset,
//	input 	seconds,
	output wire en_led,
	output wire en_timer,
	output wire en_nothing,
	output wire game_num,
	output wire random,
	input		ham,
	output wire timer_reset,
	input [9:0] place,
	input [3:0] ran_place,
	input  done,
	output over,
	output wire [3:0] hex
);


//=======================================================
//  REG/WIRE declarations
//=======================================================
reg [9:0] move,c_move;
reg [9:0] count;
reg [9:0] c_count;
reg [1:0] number;
reg enable;
reg [3:0] n1;
reg [3:0] cn;
reg score;
//reg dne;
reg store;
//=======================================================
//  Structural coding
//=======================================================
reg in_reset;
reg ran;
always @(*) begin 
if(in_reset==1'b0) begin
		c_count=10'b0000_0000_00;
	end
else begin
if(enable==1'b1) begin
	c_count=count + 1;
	if(count==10'b01_1001_0000) begin
		c_count=10'b0000_0000_00;
	end
end	
end
end
always @(posedge clk) begin 
		count<=c_count;
end 

reg [9:0] a,b;
reg r,e;
always @(*) begin 
if(r==1'b0) begin
		a=10'b0000_0000_00;
	end
else begin
if(e==1'b1) begin
	a=b + 1;
	if(b==10'b01_1001_0000) begin
		a=10'b0000_0000_00;
	end
end	
end
end
always @(posedge clk3) begin 
		b<=a;
end 

//
reg [9:0] m2,m3;
reg r6,e6;
always @(*) begin 
if(r6==1'b0) begin
		m2=10'b0000_0000_00;
	end
else begin
if(e6==1'b1) begin
	m2=m3 + 1;
	if(m3==10'b0110010000) begin
		m2=10'b0000_0000_00;
	end
end	
end
end
always @(posedge clk) begin 
		m3<=m2;
end 

//
always @(*) begin
	c_move=move;
if(store ==1'b1) begin
	if(ran_place==4'b0000) 
		c_move=10'b00_0000_0001;
	else if (ran_place==4'b0001)
		c_move=10'b00_0000_0010;
	else if (ran_place==4'b0010)
		c_move=10'b00_0000_0100;
	else if (ran_place==4'b0011)
		c_move=10'b00_0000_1000;
	else if (ran_place==4'b0100)
		c_move=10'b00_0001_0000;
	else if (ran_place==4'b0101)
		c_move=10'b00_0010_0000;
	else if (ran_place==4'b0110)
		c_move=10'b00_0100_0000;
	else if (ran_place==4'b0111)
		c_move=10'b00_1000_0000;
	else if (ran_place==4'b1000)
		c_move=10'b01_0000_0000;
	else if (ran_place==4'b1001)
		c_move=10'b10_0000_0000;
end 
end
always @(*) begin
	move<=c_move;
end



reg [2:0] state;
reg [2:0] c_state;
reg en_led1,en_time1, en_nothing1;
reg t_reset;
//reg next;
reg gameo;
always @(*) begin
if(n1==4'b0101)begin
	gameo=1'b1;
	cn=n1;
	en_led1=1'b0;
end
else begin
	gameo=1'b0;
	c_state=state;
	enable=1'b0;
	in_reset=1'b1;
	en_nothing1=1'b0;
	en_time1=1'b0;
	en_led1=1'b0;
	ran=1'b0;
	store=1'b0;
	e=1'b0;
	t_reset=1'b0;
	r=1'b1;
	cn=n1;
	e6=1'b0;
	r6=1'b1;
	
	
	if(state==3'b000) begin
		enable=1'b1;
		r=1'b0;
		r6=1'b0;
		en_nothing1=1'b1;
		t_reset=1'b1;
		if(count==9'b100101100) begin
			c_state =3'b001;cn=n1+1'b1;
			in_reset=1'b0;
		//	r=1'b0;
		end
	end
	if(state==3'b001) begin
		enable=1'b1;
	//	r=1'b0;
		en_time1 =1'b1;
		en_led1 =1'b1;
		ran=1'b1;
		
		store =1'b1;
		if(count==9'b101_0000_00)begin
			c_state=3'b010;
		//	r=1'b0;
			in_reset=1'b0;
		end
	end	
	if(state==3'b010) begin
		ran=1'b0;
		in_reset=1'b0;
		en_nothing1=1'b0;
		en_led1 =1'b1;
	//	r=1'b0;
		en_time1=1'b1;
		if((ham==1'b1)&&(place==move)) begin
			en_led1=1'b0;
			en_time1=1'b0;
			score=1'b1;
			c_state=3'b011;
		//	cn=n1+1'b1; //new
		end	
		if(done==1'b1) begin
			en_led1=1'b0;
			en_time1=1'b0;
		//	score=1'b1;
		//	cn=n1+1'b1; //new test
			c_state=3'b011;
		end
	end
	if(state==3'b011) begin
		en_led1=1'b0;
		en_time1=1'b0;
		enable=1'b0;
		ran=1'b0;
		en_nothing1=1'b0;
		score=1'b1;
		e=1'b1;
		e6=1'b1;
		in_reset=1'b0;
		if(m3==9'b100101100)begin
			c_state=3'b000;
			t_reset=1'b1;
			in_reset=1'b0;
		end
	end

end	
	if(reset==1'b0) begin
		c_state=3'b000;
		in_reset=1'b0;
		t_reset=1'b1;
		ran=1'b0;
		cn=4'b0000;
	end
end

always @(posedge clk2) begin
	state<=c_state;
	n1<=cn;
end

/*
always &(*)begin
	n1=
	if()begin
		
	end
end
always &(*) begin
	cn<=n1;
end
*/
assign en_led = en_led1;
assign en_timer = en_time1;
assign en_nothing = en_nothing1;
assign random =ran;
assign game_num=n1;
assign hex=n1;
assign timer_reset=t_reset;
assign over=gameo;
//assign random = ran;
//assign try=zero;
endmodule
